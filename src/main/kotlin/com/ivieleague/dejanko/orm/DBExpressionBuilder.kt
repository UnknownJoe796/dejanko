package com.ivieleague.dejanko.orm

import kotlin.reflect.KProperty1

inline fun <T> db(action: DBExpressionBuilder.() -> DBExpression<T>): DBExpression<T> = with(DBExpressionBuilder, action)

object DBExpressionBuilder {
    @Suppress("UNCHECKED_CAST")
    fun <T> prop(property: KProperty1<*, T>): DBExpression<T> = (property as KProperty1<Any, T>).dbColumn
    @Suppress("UNCHECKED_CAST")
    val <KEY, TABLE: Any> DBExpression<ForeignKey<KEY, TABLE>>.raw: DBExpression<KEY> get() = this as DBExpression<KEY>

    //There's a test that generates these.  You really don't need to make them by hand.
    @JvmName("plusDirectDBExpr") operator fun <T: Number> T.plus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.PLUS, other)
    @JvmName("plusDirectProp") operator fun <T: Number> T.plus(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.PLUS, prop(other))
    @JvmName("plusDBExprDirect") operator fun <T: Number> DBExpression<T>.plus(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.PLUS, DBExpressionConstant(other))
    @JvmName("plusDBExprDBExpr") operator fun <T: Number> DBExpression<T>.plus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.PLUS, other)
    @JvmName("plusDBExprProp") operator fun <T: Number> DBExpression<T>.plus(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.PLUS, prop(other))
    @JvmName("plusPropDirect") operator fun <T: Number> KProperty1<*, T>.plus(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.PLUS, DBExpressionConstant(other))
    @JvmName("plusPropDBExpr") operator fun <T: Number> KProperty1<*, T>.plus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.PLUS, other)
    @JvmName("plusPropProp") operator fun <T: Number> KProperty1<*, T>.plus(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.PLUS, prop(other))
    @JvmName("minusDirectDBExpr") operator fun <T: Number> T.minus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.MINUS, other)
    @JvmName("minusDirectProp") operator fun <T: Number> T.minus(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.MINUS, prop(other))
    @JvmName("minusDBExprDirect") operator fun <T: Number> DBExpression<T>.minus(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MINUS, DBExpressionConstant(other))
    @JvmName("minusDBExprDBExpr") operator fun <T: Number> DBExpression<T>.minus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MINUS, other)
    @JvmName("minusDBExprProp") operator fun <T: Number> DBExpression<T>.minus(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MINUS, prop(other))
    @JvmName("minusPropDirect") operator fun <T: Number> KProperty1<*, T>.minus(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.MINUS, DBExpressionConstant(other))
    @JvmName("minusPropDBExpr") operator fun <T: Number> KProperty1<*, T>.minus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.MINUS, other)
    @JvmName("minusPropProp") operator fun <T: Number> KProperty1<*, T>.minus(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.MINUS, prop(other))
    @JvmName("timesDirectDBExpr") operator fun <T: Number> T.times(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.TIMES, other)
    @JvmName("timesDirectProp") operator fun <T: Number> T.times(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.TIMES, prop(other))
    @JvmName("timesDBExprDirect") operator fun <T: Number> DBExpression<T>.times(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.TIMES, DBExpressionConstant(other))
    @JvmName("timesDBExprDBExpr") operator fun <T: Number> DBExpression<T>.times(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.TIMES, other)
    @JvmName("timesDBExprProp") operator fun <T: Number> DBExpression<T>.times(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.TIMES, prop(other))
    @JvmName("timesPropDirect") operator fun <T: Number> KProperty1<*, T>.times(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.TIMES, DBExpressionConstant(other))
    @JvmName("timesPropDBExpr") operator fun <T: Number> KProperty1<*, T>.times(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.TIMES, other)
    @JvmName("timesPropProp") operator fun <T: Number> KProperty1<*, T>.times(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.TIMES, prop(other))
    @JvmName("divDirectDBExpr") operator fun <T: Number> T.div(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.DIV, other)
    @JvmName("divDirectProp") operator fun <T: Number> T.div(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.DIV, prop(other))
    @JvmName("divDBExprDirect") operator fun <T: Number> DBExpression<T>.div(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.DIV, DBExpressionConstant(other))
    @JvmName("divDBExprDBExpr") operator fun <T: Number> DBExpression<T>.div(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.DIV, other)
    @JvmName("divDBExprProp") operator fun <T: Number> DBExpression<T>.div(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.DIV, prop(other))
    @JvmName("divPropDirect") operator fun <T: Number> KProperty1<*, T>.div(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.DIV, DBExpressionConstant(other))
    @JvmName("divPropDBExpr") operator fun <T: Number> KProperty1<*, T>.div(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.DIV, other)
    @JvmName("divPropProp") operator fun <T: Number> KProperty1<*, T>.div(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.DIV, prop(other))
    @JvmName("moduloDirectDBExpr") infix fun <T> T.modulo(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.MODULO, other)
    @JvmName("moduloDirectProp") infix fun <T> T.modulo(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.MODULO, prop(other))
    @JvmName("moduloDBExprDirect") infix fun <T> DBExpression<T>.modulo(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MODULO, DBExpressionConstant(other))
    @JvmName("moduloDBExprDBExpr") infix fun <T> DBExpression<T>.modulo(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MODULO, other)
    @JvmName("moduloDBExprProp") infix fun <T> DBExpression<T>.modulo(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MODULO, prop(other))
    @JvmName("moduloPropDirect") infix fun <T> KProperty1<*, T>.modulo(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.MODULO, DBExpressionConstant(other))
    @JvmName("moduloPropDBExpr") infix fun <T> KProperty1<*, T>.modulo(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.MODULO, other)
    @JvmName("moduloPropProp") infix fun <T> KProperty1<*, T>.modulo(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.MODULO, prop(other))
    @JvmName("exponentDirectDBExpr") infix fun <T> T.exponent(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.EXPONENT, other)
    @JvmName("exponentDirectProp") infix fun <T> T.exponent(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.EXPONENT, prop(other))
    @JvmName("exponentDBExprDirect") infix fun <T> DBExpression<T>.exponent(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.EXPONENT, DBExpressionConstant(other))
    @JvmName("exponentDBExprDBExpr") infix fun <T> DBExpression<T>.exponent(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.EXPONENT, other)
    @JvmName("exponentDBExprProp") infix fun <T> DBExpression<T>.exponent(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.EXPONENT, prop(other))
    @JvmName("exponentPropDirect") infix fun <T> KProperty1<*, T>.exponent(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.EXPONENT, DBExpressionConstant(other))
    @JvmName("exponentPropDBExpr") infix fun <T> KProperty1<*, T>.exponent(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.EXPONENT, other)
    @JvmName("exponentPropProp") infix fun <T> KProperty1<*, T>.exponent(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.EXPONENT, prop(other))
    @JvmName("xorDirectDBExpr") infix fun <T> T.xor(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_XOR, other)
    @JvmName("xorDirectProp") infix fun <T> T.xor(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_XOR, prop(other))
    @JvmName("xorDBExprDirect") infix fun <T> DBExpression<T>.xor(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_XOR, DBExpressionConstant(other))
    @JvmName("xorDBExprDBExpr") infix fun <T> DBExpression<T>.xor(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_XOR, other)
    @JvmName("xorDBExprProp") infix fun <T> DBExpression<T>.xor(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_XOR, prop(other))
    @JvmName("xorPropDirect") infix fun <T> KProperty1<*, T>.xor(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_XOR, DBExpressionConstant(other))
    @JvmName("xorPropDBExpr") infix fun <T> KProperty1<*, T>.xor(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_XOR, other)
    @JvmName("xorPropProp") infix fun <T> KProperty1<*, T>.xor(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_XOR, prop(other))
    @JvmName("shlDirectDBExpr") infix fun <T> T.shl(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_SHIFT_LEFT, other)
    @JvmName("shlDirectProp") infix fun <T> T.shl(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_SHIFT_LEFT, prop(other))
    @JvmName("shlDBExprDirect") infix fun <T> DBExpression<T>.shl(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_LEFT, DBExpressionConstant(other))
    @JvmName("shlDBExprDBExpr") infix fun <T> DBExpression<T>.shl(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_LEFT, other)
    @JvmName("shlDBExprProp") infix fun <T> DBExpression<T>.shl(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_LEFT, prop(other))
    @JvmName("shlPropDirect") infix fun <T> KProperty1<*, T>.shl(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_SHIFT_LEFT, DBExpressionConstant(other))
    @JvmName("shlPropDBExpr") infix fun <T> KProperty1<*, T>.shl(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_SHIFT_LEFT, other)
    @JvmName("shlPropProp") infix fun <T> KProperty1<*, T>.shl(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_SHIFT_LEFT, prop(other))
    @JvmName("shrDirectDBExpr") infix fun <T> T.shr(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_SHIFT_RIGHT, other)
    @JvmName("shrDirectProp") infix fun <T> T.shr(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_SHIFT_RIGHT, prop(other))
    @JvmName("shrDBExprDirect") infix fun <T> DBExpression<T>.shr(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_RIGHT, DBExpressionConstant(other))
    @JvmName("shrDBExprDBExpr") infix fun <T> DBExpression<T>.shr(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_RIGHT, other)
    @JvmName("shrDBExprProp") infix fun <T> DBExpression<T>.shr(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_RIGHT, prop(other))
    @JvmName("shrPropDirect") infix fun <T> KProperty1<*, T>.shr(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_SHIFT_RIGHT, DBExpressionConstant(other))
    @JvmName("shrPropDBExpr") infix fun <T> KProperty1<*, T>.shr(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_SHIFT_RIGHT, other)
    @JvmName("shrPropProp") infix fun <T> KProperty1<*, T>.shr(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_SHIFT_RIGHT, prop(other))
    @JvmName("bitAndDirectDBExpr") infix fun <T> T.and(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_AND, other)
    @JvmName("bitAndDirectProp") infix fun <T> T.and(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_AND, prop(other))
    @JvmName("bitAndDBExprDirect") infix fun <T> DBExpression<T>.and(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_AND, DBExpressionConstant(other))
    @JvmName("bitAndDBExprDBExpr") infix fun <T> DBExpression<T>.and(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_AND, other)
    @JvmName("bitAndDBExprProp") infix fun <T> DBExpression<T>.and(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_AND, prop(other))
    @JvmName("bitAndPropDirect") infix fun <T> KProperty1<*, T>.and(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_AND, DBExpressionConstant(other))
    @JvmName("bitAndPropDBExpr") infix fun <T> KProperty1<*, T>.and(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_AND, other)
    @JvmName("bitAndPropProp") infix fun <T> KProperty1<*, T>.and(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_AND, prop(other))
    @JvmName("bitOrDirectDBExpr") infix fun <T> T.or(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_OR, other)
    @JvmName("bitOrDirectProp") infix fun <T> T.or(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_OR, prop(other))
    @JvmName("bitOrDBExprDirect") infix fun <T> DBExpression<T>.or(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_OR, DBExpressionConstant(other))
    @JvmName("bitOrDBExprDBExpr") infix fun <T> DBExpression<T>.or(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_OR, other)
    @JvmName("bitOrDBExprProp") infix fun <T> DBExpression<T>.or(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_OR, prop(other))
    @JvmName("bitOrPropDirect") infix fun <T> KProperty1<*, T>.or(other: T): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_OR, DBExpressionConstant(other))
    @JvmName("bitOrPropDBExpr") infix fun <T> KProperty1<*, T>.or(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_OR, other)
    @JvmName("bitOrPropProp") infix fun <T> KProperty1<*, T>.or(other: KProperty1<*, T>): DBExpression<T> = DBExpressionMathematical(prop(this), MathematicalType.BIT_OR, prop(other))
    @JvmName("unaryMinusDBExpr") operator fun <T: Number> DBExpression<T>.unaryMinus(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.NEGATIVE)
    @JvmName("unaryMinusProp") operator fun <T: Number> KProperty1<*, T>.unaryMinus(): DBExpression<T> = DBExpressionMathematicalUnary(prop(this), MathematicalUnaryType.NEGATIVE)
    @JvmName("absoluteValueDBExpr") fun <T: Number> DBExpression<T>.absoluteValue(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.ABSOLUTE_VALUE)
    @JvmName("absoluteValueProp") fun <T: Number> KProperty1<*, T>.absoluteValue(): DBExpression<T> = DBExpressionMathematicalUnary(prop(this), MathematicalUnaryType.ABSOLUTE_VALUE)
    @JvmName("squareRootDBExpr") fun <T: Number> DBExpression<T>.squareRoot(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.SQUARE_ROOT)
    @JvmName("squareRootProp") fun <T: Number> KProperty1<*, T>.squareRoot(): DBExpression<T> = DBExpressionMathematicalUnary(prop(this), MathematicalUnaryType.SQUARE_ROOT)
    @JvmName("cubeRootDBExpr") fun <T: Number> DBExpression<T>.cubeRoot(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.CUBE_ROOT)
    @JvmName("cubeRootProp") fun <T: Number> KProperty1<*, T>.cubeRoot(): DBExpression<T> = DBExpressionMathematicalUnary(prop(this), MathematicalUnaryType.CUBE_ROOT)
    @JvmName("equalDirectDBExpr") infix fun <T> T.equal(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.EQUAL, other)
    @JvmName("equalDirectProp") infix fun <T> T.equal(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.EQUAL, prop(other))
    @JvmName("equalDBExprDirect") infix fun <T> DBExpression<T>.equal(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.EQUAL, DBExpressionConstant(other))
    @JvmName("equalDBExprDBExpr") infix fun <T> DBExpression<T>.equal(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.EQUAL, other)
    @JvmName("equalDBExprProp") infix fun <T> DBExpression<T>.equal(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.EQUAL, prop(other))
    @JvmName("equalPropDirect") infix fun <T> KProperty1<*, T>.equal(other: T): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.EQUAL, DBExpressionConstant(other))
    @JvmName("equalPropDBExpr") infix fun <T> KProperty1<*, T>.equal(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.EQUAL, other)
    @JvmName("equalPropProp") infix fun <T> KProperty1<*, T>.equal(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.EQUAL, prop(other))
    @JvmName("notEqualDirectDBExpr") infix fun <T> T.notEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.NOT_EQUAL, other)
    @JvmName("notEqualDirectProp") infix fun <T> T.notEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.NOT_EQUAL, prop(other))
    @JvmName("notEqualDBExprDirect") infix fun <T> DBExpression<T>.notEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.NOT_EQUAL, DBExpressionConstant(other))
    @JvmName("notEqualDBExprDBExpr") infix fun <T> DBExpression<T>.notEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.NOT_EQUAL, other)
    @JvmName("notEqualDBExprProp") infix fun <T> DBExpression<T>.notEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.NOT_EQUAL, prop(other))
    @JvmName("notEqualPropDirect") infix fun <T> KProperty1<*, T>.notEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.NOT_EQUAL, DBExpressionConstant(other))
    @JvmName("notEqualPropDBExpr") infix fun <T> KProperty1<*, T>.notEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.NOT_EQUAL, other)
    @JvmName("notEqualPropProp") infix fun <T> KProperty1<*, T>.notEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.NOT_EQUAL, prop(other))
    @JvmName("lessThanDirectDBExpr") infix fun <T> T.lessThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.LESS_THAN, other)
    @JvmName("lessThanDirectProp") infix fun <T> T.lessThan(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.LESS_THAN, prop(other))
    @JvmName("lessThanDBExprDirect") infix fun <T> DBExpression<T>.lessThan(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN, DBExpressionConstant(other))
    @JvmName("lessThanDBExprDBExpr") infix fun <T> DBExpression<T>.lessThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN, other)
    @JvmName("lessThanDBExprProp") infix fun <T> DBExpression<T>.lessThan(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN, prop(other))
    @JvmName("lessThanPropDirect") infix fun <T> KProperty1<*, T>.lessThan(other: T): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.LESS_THAN, DBExpressionConstant(other))
    @JvmName("lessThanPropDBExpr") infix fun <T> KProperty1<*, T>.lessThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.LESS_THAN, other)
    @JvmName("lessThanPropProp") infix fun <T> KProperty1<*, T>.lessThan(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.LESS_THAN, prop(other))
    @JvmName("lessThanEqualDirectDBExpr") infix fun <T> T.lessThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.LESS_THAN_EQUAL, other)
    @JvmName("lessThanEqualDirectProp") infix fun <T> T.lessThanEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.LESS_THAN_EQUAL, prop(other))
    @JvmName("lessThanEqualDBExprDirect") infix fun <T> DBExpression<T>.lessThanEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN_EQUAL, DBExpressionConstant(other))
    @JvmName("lessThanEqualDBExprDBExpr") infix fun <T> DBExpression<T>.lessThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN_EQUAL, other)
    @JvmName("lessThanEqualDBExprProp") infix fun <T> DBExpression<T>.lessThanEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN_EQUAL, prop(other))
    @JvmName("lessThanEqualPropDirect") infix fun <T> KProperty1<*, T>.lessThanEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.LESS_THAN_EQUAL, DBExpressionConstant(other))
    @JvmName("lessThanEqualPropDBExpr") infix fun <T> KProperty1<*, T>.lessThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.LESS_THAN_EQUAL, other)
    @JvmName("lessThanEqualPropProp") infix fun <T> KProperty1<*, T>.lessThanEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.LESS_THAN_EQUAL, prop(other))
    @JvmName("greaterThanDirectDBExpr") infix fun <T> T.greaterThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.GREATER_THAN, other)
    @JvmName("greaterThanDirectProp") infix fun <T> T.greaterThan(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.GREATER_THAN, prop(other))
    @JvmName("greaterThanDBExprDirect") infix fun <T> DBExpression<T>.greaterThan(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN, DBExpressionConstant(other))
    @JvmName("greaterThanDBExprDBExpr") infix fun <T> DBExpression<T>.greaterThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN, other)
    @JvmName("greaterThanDBExprProp") infix fun <T> DBExpression<T>.greaterThan(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN, prop(other))
    @JvmName("greaterThanPropDirect") infix fun <T> KProperty1<*, T>.greaterThan(other: T): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.GREATER_THAN, DBExpressionConstant(other))
    @JvmName("greaterThanPropDBExpr") infix fun <T> KProperty1<*, T>.greaterThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.GREATER_THAN, other)
    @JvmName("greaterThanPropProp") infix fun <T> KProperty1<*, T>.greaterThan(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.GREATER_THAN, prop(other))
    @JvmName("greaterThanEqualDirectDBExpr") infix fun <T> T.greaterThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.GREATER_THAN_EQUAL, other)
    @JvmName("greaterThanEqualDirectProp") infix fun <T> T.greaterThanEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.GREATER_THAN_EQUAL, prop(other))
    @JvmName("greaterThanEqualDBExprDirect") infix fun <T> DBExpression<T>.greaterThanEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN_EQUAL, DBExpressionConstant(other))
    @JvmName("greaterThanEqualDBExprDBExpr") infix fun <T> DBExpression<T>.greaterThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN_EQUAL, other)
    @JvmName("greaterThanEqualDBExprProp") infix fun <T> DBExpression<T>.greaterThanEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN_EQUAL, prop(other))
    @JvmName("greaterThanEqualPropDirect") infix fun <T> KProperty1<*, T>.greaterThanEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.GREATER_THAN_EQUAL, DBExpressionConstant(other))
    @JvmName("greaterThanEqualPropDBExpr") infix fun <T> KProperty1<*, T>.greaterThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.GREATER_THAN_EQUAL, other)
    @JvmName("greaterThanEqualPropProp") infix fun <T> KProperty1<*, T>.greaterThanEqual(other: KProperty1<*, T>): DBExpression<Boolean> = DBExpressionCompare(prop(this), ComparisonType.GREATER_THAN_EQUAL, prop(other))
    @JvmName("andDirectDBExpr") infix fun Boolean.and(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(DBExpressionConstant(this), other))
    @JvmName("andDirectProp") infix fun Boolean.and(other: KProperty1<*, Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(DBExpressionConstant(this), prop(other)))
    @JvmName("andDBExprDirect") infix fun DBExpression<Boolean>.and(other: Boolean): DBExpression<Boolean> = DBExpressionAll(listOf(this, DBExpressionConstant(other)))
    @JvmName("andDBExprDBExpr") infix fun DBExpression<Boolean>.and(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(this, other))
    @JvmName("andDBExprProp") infix fun DBExpression<Boolean>.and(other: KProperty1<*, Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(this, prop(other)))
    @JvmName("andPropDirect") infix fun KProperty1<*, Boolean>.and(other: Boolean): DBExpression<Boolean> = DBExpressionAll(listOf(prop(this), DBExpressionConstant(other)))
    @JvmName("andPropDBExpr") infix fun KProperty1<*, Boolean>.and(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(prop(this), other))
    @JvmName("andPropProp") infix fun KProperty1<*, Boolean>.and(other: KProperty1<*, Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(prop(this), prop(other)))
    @JvmName("orDirectDBExpr") infix fun Boolean.or(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(DBExpressionConstant(this), other))
    @JvmName("orDirectProp") infix fun Boolean.or(other: KProperty1<*, Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(DBExpressionConstant(this), prop(other)))
    @JvmName("orDBExprDirect") infix fun DBExpression<Boolean>.or(other: Boolean): DBExpression<Boolean> = DBExpressionAny(listOf(this, DBExpressionConstant(other)))
    @JvmName("orDBExprDBExpr") infix fun DBExpression<Boolean>.or(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(this, other))
    @JvmName("orDBExprProp") infix fun DBExpression<Boolean>.or(other: KProperty1<*, Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(this, prop(other)))
    @JvmName("orPropDirect") infix fun KProperty1<*, Boolean>.or(other: Boolean): DBExpression<Boolean> = DBExpressionAny(listOf(prop(this), DBExpressionConstant(other)))
    @JvmName("orPropDBExpr") infix fun KProperty1<*, Boolean>.or(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(prop(this), other))
    @JvmName("orPropProp") infix fun KProperty1<*, Boolean>.or(other: KProperty1<*, Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(prop(this), prop(other)))
    @JvmName("notDBExpr") operator fun DBExpression<Boolean>.not(): DBExpression<Boolean> = DBExpressionNot(this)
    @JvmName("notProp") operator fun KProperty1<*, Boolean>.not(): DBExpression<Boolean> = DBExpressionNot(prop(this))
    @JvmName("concatDirectDBExpr") operator fun String.plus(other: DBExpression<String>): DBExpression<String> = DBExpressionConcat(listOf(DBExpressionConstant(this), other))
    @JvmName("concatDirectProp") operator fun String.plus(other: KProperty1<*, String>): DBExpression<String> = DBExpressionConcat(listOf(DBExpressionConstant(this), prop(other)))
    @JvmName("concatDBExprDirect") operator fun DBExpression<String>.plus(other: String): DBExpression<String> = DBExpressionConcat(listOf(this, DBExpressionConstant(other)))
    @JvmName("concatDBExprDBExpr") operator fun DBExpression<String>.plus(other: DBExpression<String>): DBExpression<String> = DBExpressionConcat(listOf(this, other))
    @JvmName("concatDBExprProp") operator fun DBExpression<String>.plus(other: KProperty1<*, String>): DBExpression<String> = DBExpressionConcat(listOf(this, prop(other)))
    @JvmName("concatPropDirect") operator fun KProperty1<*, String>.plus(other: String): DBExpression<String> = DBExpressionConcat(listOf(prop(this), DBExpressionConstant(other)))
    @JvmName("concatPropDBExpr") operator fun KProperty1<*, String>.plus(other: DBExpression<String>): DBExpression<String> = DBExpressionConcat(listOf(prop(this), other))
    @JvmName("concatPropProp") operator fun KProperty1<*, String>.plus(other: KProperty1<*, String>): DBExpression<String> = DBExpressionConcat(listOf(prop(this), prop(other)))
    @JvmName("toStringExpDBExpr") fun <T> DBExpression<T>.toStringExp(): DBExpression<String> = DBExpressionCast(this, DBTypeNoOp<String>())
    @JvmName("toStringExpProp") fun <T> KProperty1<*, T>.toStringExp(): DBExpression<String> = DBExpressionCast(prop(this), DBTypeNoOp<String>())
    @JvmName("likeDirectDBExpr") infix fun String.like(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.LIKE, other)
    @JvmName("likeDirectProp") infix fun String.like(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.LIKE, prop(other))
    @JvmName("likeDBExprDirect") infix fun DBExpression<String>.like(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.LIKE, DBExpressionConstant(other))
    @JvmName("likeDBExprDBExpr") infix fun DBExpression<String>.like(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.LIKE, other)
    @JvmName("likeDBExprProp") infix fun DBExpression<String>.like(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.LIKE, prop(other))
    @JvmName("likePropDirect") infix fun KProperty1<*, String>.like(other: String): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.LIKE, DBExpressionConstant(other))
    @JvmName("likePropDBExpr") infix fun KProperty1<*, String>.like(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.LIKE, other)
    @JvmName("likePropProp") infix fun KProperty1<*, String>.like(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.LIKE, prop(other))
    @JvmName("matchesRegexDirectDBExpr") infix fun String.matchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.MATCHES_REGEX, other)
    @JvmName("matchesRegexDirectProp") infix fun String.matchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.MATCHES_REGEX, prop(other))
    @JvmName("matchesRegexDBExprDirect") infix fun DBExpression<String>.matchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("matchesRegexDBExprDBExpr") infix fun DBExpression<String>.matchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.MATCHES_REGEX, other)
    @JvmName("matchesRegexDBExprProp") infix fun DBExpression<String>.matchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.MATCHES_REGEX, prop(other))
    @JvmName("matchesRegexPropDirect") infix fun KProperty1<*, String>.matchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("matchesRegexPropDBExpr") infix fun KProperty1<*, String>.matchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.MATCHES_REGEX, other)
    @JvmName("matchesRegexPropProp") infix fun KProperty1<*, String>.matchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.MATCHES_REGEX, prop(other))
    @JvmName("insensitiveMatchesRegexDirectDBExpr") infix fun String.insensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.INSENSITIVE_MATCHES_REGEX, other)
    @JvmName("insensitiveMatchesRegexDirectProp") infix fun String.insensitiveMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.INSENSITIVE_MATCHES_REGEX, prop(other))
    @JvmName("insensitiveMatchesRegexDBExprDirect") infix fun DBExpression<String>.insensitiveMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.INSENSITIVE_MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("insensitiveMatchesRegexDBExprDBExpr") infix fun DBExpression<String>.insensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.INSENSITIVE_MATCHES_REGEX, other)
    @JvmName("insensitiveMatchesRegexDBExprProp") infix fun DBExpression<String>.insensitiveMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.INSENSITIVE_MATCHES_REGEX, prop(other))
    @JvmName("insensitiveMatchesRegexPropDirect") infix fun KProperty1<*, String>.insensitiveMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.INSENSITIVE_MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("insensitiveMatchesRegexPropDBExpr") infix fun KProperty1<*, String>.insensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.INSENSITIVE_MATCHES_REGEX, other)
    @JvmName("insensitiveMatchesRegexPropProp") infix fun KProperty1<*, String>.insensitiveMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.INSENSITIVE_MATCHES_REGEX, prop(other))
    @JvmName("notMatchesRegexDirectDBExpr") infix fun String.notMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.NOT_MATCHES_REGEX, other)
    @JvmName("notMatchesRegexDirectProp") infix fun String.notMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.NOT_MATCHES_REGEX, prop(other))
    @JvmName("notMatchesRegexDBExprDirect") infix fun DBExpression<String>.notMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("notMatchesRegexDBExprDBExpr") infix fun DBExpression<String>.notMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_MATCHES_REGEX, other)
    @JvmName("notMatchesRegexDBExprProp") infix fun DBExpression<String>.notMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_MATCHES_REGEX, prop(other))
    @JvmName("notMatchesRegexPropDirect") infix fun KProperty1<*, String>.notMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.NOT_MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("notMatchesRegexPropDBExpr") infix fun KProperty1<*, String>.notMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.NOT_MATCHES_REGEX, other)
    @JvmName("notMatchesRegexPropProp") infix fun KProperty1<*, String>.notMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.NOT_MATCHES_REGEX, prop(other))
    @JvmName("notInsensitiveMatchesRegexDirectDBExpr") infix fun String.notInsensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, other)
    @JvmName("notInsensitiveMatchesRegexDirectProp") infix fun String.notInsensitiveMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, prop(other))
    @JvmName("notInsensitiveMatchesRegexDBExprDirect") infix fun DBExpression<String>.notInsensitiveMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("notInsensitiveMatchesRegexDBExprDBExpr") infix fun DBExpression<String>.notInsensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, other)
    @JvmName("notInsensitiveMatchesRegexDBExprProp") infix fun DBExpression<String>.notInsensitiveMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, prop(other))
    @JvmName("notInsensitiveMatchesRegexPropDirect") infix fun KProperty1<*, String>.notInsensitiveMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, DBExpressionConstant(other))
    @JvmName("notInsensitiveMatchesRegexPropDBExpr") infix fun KProperty1<*, String>.notInsensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, other)
    @JvmName("notInsensitiveMatchesRegexPropProp") infix fun KProperty1<*, String>.notInsensitiveMatchesRegex(other: KProperty1<*, String>): DBExpression<Boolean> = DBExpressionStringComparison(prop(this), StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, prop(other))
    @JvmName("coalesceDirectDBExpr") infix fun <T> T?.coalesce(other: DBExpression<T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(DBExpressionConstant(this), other))
    @JvmName("coalesceDirectProp") infix fun <T> T?.coalesce(other: KProperty1<*, T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(DBExpressionConstant(this), prop(other)))
    @JvmName("coalesceDBExprDirect") infix fun <T> DBExpression<T?>.coalesce(other: T?): DBExpression<T?> = DBExpressionCoalesce(listOf(this, DBExpressionConstant(other)))
    @JvmName("coalesceDBExprDBExpr") infix fun <T> DBExpression<T?>.coalesce(other: DBExpression<T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(this, other))
    @JvmName("coalesceDBExprProp") infix fun <T> DBExpression<T?>.coalesce(other: KProperty1<*, T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(this, prop(other)))
    @JvmName("coalescePropDirect") infix fun <T> KProperty1<*, T?>.coalesce(other: T?): DBExpression<T?> = DBExpressionCoalesce(listOf(prop(this), DBExpressionConstant(other)))
    @JvmName("coalescePropDBExpr") infix fun <T> KProperty1<*, T?>.coalesce(other: DBExpression<T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(prop(this), other))
    @JvmName("coalescePropProp") infix fun <T> KProperty1<*, T?>.coalesce(other: KProperty1<*, T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(prop(this), prop(other)))
}