package com.ivieleague.dejanko.orm

@Suppress("UNCHECKED_CAST")
val <KEY, T: Any> DBExpression<ForeignKey<KEY, T>>.raw get() = this as DBExpression<KEY>
@JvmName("plusDirectDBExpr") operator fun <T: Number> T.plus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.PLUS, other)
@JvmName("plusDBExprDirect") operator fun <T: Number> DBExpression<T>.plus(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.PLUS, DBExpressionConstant(other))
@JvmName("plusDBExprDBExpr") operator fun <T: Number> DBExpression<T>.plus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.PLUS, other)
@JvmName("minusDirectDBExpr") operator fun <T: Number> T.minus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.MINUS, other)
@JvmName("minusDBExprDirect") operator fun <T: Number> DBExpression<T>.minus(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MINUS, DBExpressionConstant(other))
@JvmName("minusDBExprDBExpr") operator fun <T: Number> DBExpression<T>.minus(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MINUS, other)
@JvmName("timesDirectDBExpr") operator fun <T: Number> T.times(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.TIMES, other)
@JvmName("timesDBExprDirect") operator fun <T: Number> DBExpression<T>.times(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.TIMES, DBExpressionConstant(other))
@JvmName("timesDBExprDBExpr") operator fun <T: Number> DBExpression<T>.times(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.TIMES, other)
@JvmName("divDirectDBExpr") operator fun <T: Number> T.div(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.DIV, other)
@JvmName("divDBExprDirect") operator fun <T: Number> DBExpression<T>.div(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.DIV, DBExpressionConstant(other))
@JvmName("divDBExprDBExpr") operator fun <T: Number> DBExpression<T>.div(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.DIV, other)
@JvmName("moduloDirectDBExpr") infix fun <T: Number> T.modulo(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.MODULO, other)
@JvmName("moduloDBExprDirect") infix fun <T: Number> DBExpression<T>.modulo(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MODULO, DBExpressionConstant(other))
@JvmName("moduloDBExprDBExpr") infix fun <T: Number> DBExpression<T>.modulo(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.MODULO, other)
@JvmName("exponentDirectDBExpr") infix fun <T: Number> T.exponent(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.EXPONENT, other)
@JvmName("exponentDBExprDirect") infix fun <T: Number> DBExpression<T>.exponent(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.EXPONENT, DBExpressionConstant(other))
@JvmName("exponentDBExprDBExpr") infix fun <T: Number> DBExpression<T>.exponent(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.EXPONENT, other)
@JvmName("xorDirectDBExpr") infix fun <T: Number> T.xor(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_XOR, other)
@JvmName("xorDBExprDirect") infix fun <T: Number> DBExpression<T>.xor(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_XOR, DBExpressionConstant(other))
@JvmName("xorDBExprDBExpr") infix fun <T: Number> DBExpression<T>.xor(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_XOR, other)
@JvmName("shlDirectDBExpr") infix fun <T: Number> T.shl(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_SHIFT_LEFT, other)
@JvmName("shlDBExprDirect") infix fun <T: Number> DBExpression<T>.shl(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_LEFT, DBExpressionConstant(other))
@JvmName("shlDBExprDBExpr") infix fun <T: Number> DBExpression<T>.shl(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_LEFT, other)
@JvmName("shrDirectDBExpr") infix fun <T: Number> T.shr(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_SHIFT_RIGHT, other)
@JvmName("shrDBExprDirect") infix fun <T: Number> DBExpression<T>.shr(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_RIGHT, DBExpressionConstant(other))
@JvmName("shrDBExprDBExpr") infix fun <T: Number> DBExpression<T>.shr(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_SHIFT_RIGHT, other)
@JvmName("bitAndDirectDBExpr") infix fun <T: Number> T.and(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_AND, other)
@JvmName("bitAndDBExprDirect") infix fun <T: Number> DBExpression<T>.and(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_AND, DBExpressionConstant(other))
@JvmName("bitAndDBExprDBExpr") infix fun <T: Number> DBExpression<T>.and(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_AND, other)
@JvmName("bitOrDirectDBExpr") infix fun <T: Number> T.or(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(DBExpressionConstant(this), MathematicalType.BIT_OR, other)
@JvmName("bitOrDBExprDirect") infix fun <T: Number> DBExpression<T>.or(other: T): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_OR, DBExpressionConstant(other))
@JvmName("bitOrDBExprDBExpr") infix fun <T: Number> DBExpression<T>.or(other: DBExpression<T>): DBExpression<T> = DBExpressionMathematical(this, MathematicalType.BIT_OR, other)
@JvmName("unaryMinusDBExpr") operator fun <T: Number> DBExpression<T>.unaryMinus(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.NEGATIVE)
@JvmName("absoluteValueDBExpr") fun <T: Number> DBExpression<T>.absoluteValue(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.ABSOLUTE_VALUE)
@JvmName("squareRootDBExpr") fun <T: Number> DBExpression<T>.squareRoot(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.SQUARE_ROOT)
@JvmName("cubeRootDBExpr") fun <T: Number> DBExpression<T>.cubeRoot(): DBExpression<T> = DBExpressionMathematicalUnary(this, MathematicalUnaryType.CUBE_ROOT)
@JvmName("equalDirectDBExpr") infix fun <T> T.equal(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.EQUAL, other)
@JvmName("equalDBExprDirect") infix fun <T> DBExpression<T>.equal(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.EQUAL, DBExpressionConstant(other))
@JvmName("equalDBExprDBExpr") infix fun <T> DBExpression<T>.equal(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.EQUAL, other)
@JvmName("notEqualDirectDBExpr") infix fun <T> T.notEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.NOT_EQUAL, other)
@JvmName("notEqualDBExprDirect") infix fun <T> DBExpression<T>.notEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.NOT_EQUAL, DBExpressionConstant(other))
@JvmName("notEqualDBExprDBExpr") infix fun <T> DBExpression<T>.notEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.NOT_EQUAL, other)
@JvmName("lessThanDirectDBExpr") infix fun <T: Comparable<*>> T.lessThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.LESS_THAN, other)
@JvmName("lessThanDBExprDirect") infix fun <T: Comparable<*>> DBExpression<T>.lessThan(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN, DBExpressionConstant(other))
@JvmName("lessThanDBExprDBExpr") infix fun <T: Comparable<*>> DBExpression<T>.lessThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN, other)
@JvmName("lessThanEqualDirectDBExpr") infix fun <T: Comparable<*>> T.lessThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.LESS_THAN_EQUAL, other)
@JvmName("lessThanEqualDBExprDirect") infix fun <T: Comparable<*>> DBExpression<T>.lessThanEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN_EQUAL, DBExpressionConstant(other))
@JvmName("lessThanEqualDBExprDBExpr") infix fun <T: Comparable<*>> DBExpression<T>.lessThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.LESS_THAN_EQUAL, other)
@JvmName("greaterThanDirectDBExpr") infix fun <T: Comparable<*>> T.greaterThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.GREATER_THAN, other)
@JvmName("greaterThanDBExprDirect") infix fun <T: Comparable<*>> DBExpression<T>.greaterThan(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN, DBExpressionConstant(other))
@JvmName("greaterThanDBExprDBExpr") infix fun <T: Comparable<*>> DBExpression<T>.greaterThan(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN, other)
@JvmName("greaterThanEqualDirectDBExpr") infix fun <T: Comparable<*>> T.greaterThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(DBExpressionConstant(this), ComparisonType.GREATER_THAN_EQUAL, other)
@JvmName("greaterThanEqualDBExprDirect") infix fun <T: Comparable<*>> DBExpression<T>.greaterThanEqual(other: T): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN_EQUAL, DBExpressionConstant(other))
@JvmName("greaterThanEqualDBExprDBExpr") infix fun <T: Comparable<*>> DBExpression<T>.greaterThanEqual(other: DBExpression<T>): DBExpression<Boolean> = DBExpressionCompare(this, ComparisonType.GREATER_THAN_EQUAL, other)
@JvmName("andDirectDBExpr") infix fun Boolean.and(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(DBExpressionConstant(this), other))
@JvmName("andDBExprDirect") infix fun DBExpression<Boolean>.and(other: Boolean): DBExpression<Boolean> = DBExpressionAll(listOf(this, DBExpressionConstant(other)))
@JvmName("andDBExprDBExpr") infix fun DBExpression<Boolean>.and(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAll(listOf(this, other))
@JvmName("orDirectDBExpr") infix fun Boolean.or(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(DBExpressionConstant(this), other))
@JvmName("orDBExprDirect") infix fun DBExpression<Boolean>.or(other: Boolean): DBExpression<Boolean> = DBExpressionAny(listOf(this, DBExpressionConstant(other)))
@JvmName("orDBExprDBExpr") infix fun DBExpression<Boolean>.or(other: DBExpression<Boolean>): DBExpression<Boolean> = DBExpressionAny(listOf(this, other))
@JvmName("notDBExpr") operator fun DBExpression<Boolean>.not(): DBExpression<Boolean> = DBExpressionNot(this)
@JvmName("concatDirectDBExpr") operator fun String.plus(other: DBExpression<String>): DBExpression<String> = DBExpressionConcat(listOf(DBExpressionConstant(this), other))
@JvmName("concatDBExprDirect") operator fun DBExpression<String>.plus(other: String): DBExpression<String> = DBExpressionConcat(listOf(this, DBExpressionConstant(other)))
@JvmName("concatDBExprDBExpr") operator fun DBExpression<String>.plus(other: DBExpression<String>): DBExpression<String> = DBExpressionConcat(listOf(this, other))
@JvmName("toStringExpDBExpr") fun <T> DBExpression<T>.toStringExp(): DBExpression<String> = DBExpressionCast(this, DBTypeNoOp<String>())
@JvmName("likeDirectDBExpr") infix fun String.like(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.LIKE, other)
@JvmName("likeDBExprDirect") infix fun DBExpression<String>.like(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.LIKE, DBExpressionConstant(other))
@JvmName("likeDBExprDBExpr") infix fun DBExpression<String>.like(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.LIKE, other)
@JvmName("matchesRegexDirectDBExpr") infix fun String.matchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.MATCHES_REGEX, other)
@JvmName("matchesRegexDBExprDirect") infix fun DBExpression<String>.matchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.MATCHES_REGEX, DBExpressionConstant(other))
@JvmName("matchesRegexDBExprDBExpr") infix fun DBExpression<String>.matchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.MATCHES_REGEX, other)
@JvmName("insensitiveMatchesRegexDirectDBExpr") infix fun String.insensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.INSENSITIVE_MATCHES_REGEX, other)
@JvmName("insensitiveMatchesRegexDBExprDirect") infix fun DBExpression<String>.insensitiveMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.INSENSITIVE_MATCHES_REGEX, DBExpressionConstant(other))
@JvmName("insensitiveMatchesRegexDBExprDBExpr") infix fun DBExpression<String>.insensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.INSENSITIVE_MATCHES_REGEX, other)
@JvmName("notMatchesRegexDirectDBExpr") infix fun String.notMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.NOT_MATCHES_REGEX, other)
@JvmName("notMatchesRegexDBExprDirect") infix fun DBExpression<String>.notMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_MATCHES_REGEX, DBExpressionConstant(other))
@JvmName("notMatchesRegexDBExprDBExpr") infix fun DBExpression<String>.notMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_MATCHES_REGEX, other)
@JvmName("notInsensitiveMatchesRegexDirectDBExpr") infix fun String.notInsensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(DBExpressionConstant(this), StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, other)
@JvmName("notInsensitiveMatchesRegexDBExprDirect") infix fun DBExpression<String>.notInsensitiveMatchesRegex(other: String): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, DBExpressionConstant(other))
@JvmName("notInsensitiveMatchesRegexDBExprDBExpr") infix fun DBExpression<String>.notInsensitiveMatchesRegex(other: DBExpression<String>): DBExpression<Boolean> = DBExpressionStringComparison(this, StringComparisonType.NOT_INSENSITIVE_MATCHES_REGEX, other)
@JvmName("coalesceDirectDBExpr") infix fun <T> T?.coalesce(other: DBExpression<T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(DBExpressionConstant(this), other))
@JvmName("coalesceDBExprDirect") infix fun <T> DBExpression<T?>.coalesce(other: T?): DBExpression<T?> = DBExpressionCoalesce(listOf(this, DBExpressionConstant(other)))
@JvmName("coalesceDBExprDBExpr") infix fun <T> DBExpression<T?>.coalesce(other: DBExpression<T?>): DBExpression<T?> = DBExpressionCoalesce(listOf(this, other))